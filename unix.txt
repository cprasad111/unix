##Count lines, words, characters
	wc <fileName>
	wc <file1> <file2> …… <fileN>
	
##output and error redirect
	echo "a" > output.txt 2> error.txt  (output and error to different file)
	echo "a" > output.txt 2>&1 (output and error to same file)
	
	
##permission
	u: user
	g: group
	o: others
	+: add permission
	-: remove permission
	=: grant permission
	absolute permission
	read(4), write(2), execute(1)
	chmod u+x <file1>   (add execute permission to user)
	chmod o-wx <file1> (removes write and execute permission to others)
	
##Shell
	when a user login to unix, the shell goes through initialization by reading /etc/profile file and user specific .profile file
	
##export
	#export a variable to be used in sub shell
	#if we define a="value" in parent.sh script. export a in the same script will make the variable 'a' visible in all the child script called by parent.sh
	#parent.sh
	a="value"
	export a
	/path/child.sh
	
	#child.sh
	echo $a #this will print "value"
	
##grep
	-v: not match
	-n: prints line number
	-l: prints only the files
	-L: prints only the files that don't match
	-i: ignore case
	-c: prints the count of matching lines
	-A: prints n lines after matching
	grep -A 3 string file 9 (prints matching line and 3 lines after the matching line)
	
	
##sort
	-n: sort numerically
	-r: descending to ascending
	+x: ignores first x columns while sorting
		a. 
		sort by 4 field in ls -rlth
		ls -rlth | sort +4
	instead of +x, use -k 5 (sort by 5th field)
	
	#tab delimited 2nd field sort
	sort -t $'\t' -k 2
	
	#pipe delimited 2nd column descending order
	sort -t "|" -nr -k 2
	
	
##vi
	a: append
	A: append to the end of line
	i: insert
	I: insert at the beginning of line
	o: insert a line below
	O: insert a line above
	
##script arguments
	$0: filename
	$1: first argument
	$2: 2nd argument and so on
	$#: number of argument
	$*: list of all arguments (can loop over arguments using this)
	$?: exit status for last command

##array

##input
	read <variableName> #it'll prompt for input
	
	
##maths using bc
	#average of n numbers
	#!/bin/sh
	sum=0
	read a
	for ((i=1; i<=$a; i++))
	do
		read num
		sum=$(($sum+$num))
	done
	b=`echo $sum/$a | bc -l`
	printf "%.3f" $b
	


##maths
	#old
	echo `expr 2 + 2`  (output 4, separate numbers and + sign with space)
	expr $a - $b
	expr $a \* $b
	expr $a / $b
	expr $a % $b
	
	#new (posix) does not support floating numbers
	(( 2+2 ))
	(( $a - $b ))
	
	#math example
	a=5
	b=2
	sum=$(( $a+$b ))   #no space between variable and = and $ sign
	echo $sum
	c=$(( $a - $b))
	echo $c
	
	[ $a == $b ]
	[ $a != $b ]
	
	#Following operators only for numeric
		-eq -ne -gt -lt -ge -le
		
	# output to fixed number of decimal, notice multiple lines
	awk 'BEGIN {
	> OFMT="%.3f"
	> print 12.2343, 2.2 }'
	12.234 2.200
	
	

	
##Conditions on numbers
	a=10
	b=20
	
	if [ $a -eq $b ]
	then
	    echo "$a and $b are equal"
	elif [ $a -gt $b ]
	then
	    echo "$a is greater than $b"
	elif [ $a -lt $b -a $a -eq 100 ]
	then
	    echo "$a is smaller than $b and a = 10"
	elif [ $a -lt $b -o $a -ne 10 ]
	then
	    echo "$a is less than $b or a is equal to 10"
	else
	    echo "done"
	fi
	
##conditionals on string  (==, !=, >=, <=)
	if [ $a == "Y" -o $a == "y" ]
	if [ $var != "y" -a $var != "Y" ]

	
##Loops
	while <condition>
	do
	    command1
	    command2
	done
	
	
	for x in 1 2 3
	do
	   echo $x
	done
	
	#for ((i=1; i<100; i++))
	for i in {1..100}
		do
        echo $i
	done
	
	
##variable substitution
	${var:=word} - if var is null or unset, it's assigned word
	there are others as well
	
##input to a command
	command << delimiter
	document
	delimiter
	
	#Here the shell interprets the << operator as an instruction to read input until it finds a line containing the specified delimiter
	
	
	
	$ wc << ABC
	> This is a text
	> This is another text 2
	> ABC
	 2  9 38
	
##function
	#!/bin/sh
	# Define your function here
	Hello () {
		echo "Hello World $1 $2"
		return 10
	}
	
	# Invoke your function
	Hello Zara Ali
	
	# Capture value returnd by last command
	ret=$?
	
	#output
	Hello World Zara Ali
	Return value is 10
	
	
##sed
	#search and replace (only the first occurence in each line is replaced
	sed 's/search_string/replace_string/' file > outputFile
	
	#search and replace all occurence in each line
	sed 's/search_string/replace_string/g' file > outputFile
	
	#multiple space to single space
	sed 's/  */ /g'
	
	#sed to delete
	sed '2d' <file> | more #deletes the second line and displays the output. The actual file is not edited
	sed '1,3d' <file> | more #deletes line from 1 to 3 and print. The actual file is not edited
	'1,+5d': deletes line 1 and next 5 lines
	
	sed '2,4!d' <file> deletes everything except the line 2 to 4
	
	sed '/^daemon/d' <file> #deletes all the lines starting with daemon
	
	#sed to print
	sed '2,4p' <file>  # print all lines of files and 2 to 4 line numbers are printed twice
	sed -n '2,4p' <file> # only prints line 2 to 4
	
	

##awk
	#to print different columns
	#$n to print all columns
	awk -F <delimiter> '{print $1, $2}'  <file>
	
	#the code inside {} will only be executed if condition is true (7==7)
	awk -F <delimiter> '<condition 7==7> {print $1, $2}'  <file> 
	
	#only when the word is there in the line
	awk -F <delimiter> '/<word>/ {print $1, $2}' <file> 
	
	#NF prints the last field
	awk -F <delimiter> '{print $NF}' <file>      
	
	#print second and third column if second column >200
	awk '$2>200 {print $1,$2}' <file>      
	
	#similar as above
	awk '$4=="Google" {print $1}' input.txt 
	
	#count number of lines for which column 2 >1000
	awk 'BEGIN {count=0;} $2>1000 {count++} END {print count}' input.txt 
	
	#math arithematic
	awk 'BEGIN {print 10/3}'  #output 3.33
	
	#output 3.33
	x=10
	y=3
	awk -v varx="$x" -v vary="$y" 'BEGIN {print varx/vary}'
	
	#awk format
	printf "%.3f %.5f", 12.3, 3}'
	



##find
	#find files/folders by name
	find . -name "searchFileName" -print

	#executes command on files/folderes found by find command
	find . -name "searchFileName" -exec "command" {} \;
	find . -name "searchFileName" -exec "ls" {} \;  #lists files in the folders that are searched, files that are searched
	
	#-type f and d for files and directories
	find . -type f -name "search"  # searches only files
	find . -type d -name "search"  # searches only directories
	
	#run grep on all files
	find . -type f -name '*put*' -exec grep '4' {} \;
	find . -type f -name '*put*' | xargs grep 'q'

##cut
	#cut by byte (counting from 1)
	echo baz | cut -b 2
	output: b
	
	echo baz | cut -b 1-2
	output: ba
	
	echo baz | cut -b 1,3
	output: bz
	
	#if there is a multibyte character, it's better to use
	#cut by character
	same as above
	
	#cut by delimiter
	#default delimiter is tab
	cut -f 2 #2nd column tab delimited
	
	echo a,b,c,d | cut -d ',' -f 1
	output: a
	
	echo a,b,c,d | cut -d ',' -f 1-3
	a,b,c
	
	#print 3rd to the end
	cut -d ',' -f 3-
	
	
	#print that is not cut by the command
	echo a,b,c,d | cut --complement -d ',' -f 1
	output: b,c,d
	
	#if a file is give, the operations is run on each line
	cut -d ',' -f 1 <fileName>
	
	#change output delimiter. Delimiter can be any character or combination of characters
	echo 'how;now;brown;cow' | cut -d ';' -f 1,3,4 --output-delimiter=','
	output; how,brown,cow

#head
	#first 20 lines
	head -20 <file>
	head -n 20 <file>
	
	#first 20 characters
	head -c 20
	
#tail 
	#last 20 lines
	tail -n 20
	
	#last 20 character
	tail -c 20
	
#tr
	#works character by character replacement
	#replace a with x
	echo "abcd" | tr "a" "x"
	>> xbcd
	
	#replace a with x and d with p
	echo "abcd" | tr "ad" "xp"
	
	#delete char a
	echo "abcd" | tr -d "a"
	>> bcd
	
	#delete all small char
	echo "abcAdB" | tc -d [a-z]
	>> AB
	
	#multipel space to single space
	echo "a    bc   d" | tr -s " "
	>> a bc d
	
#uniq
	#removes consecutive repititions of lines
	cat file.txt | uniq
	
	#sort and removes consecutive repititions
	cat file.txt | sort | uniq
	
	#ignore case -i, -c to display the number of repititions
	cat file.txt | uniq -c -i
	
	# -d: only prints duplicated lines once
	# -D: prints duplicated lines as many times it appears
	# -u: print only uniq lines

#paste
	#paste commands changes multiple line into single line with tab delimited by default
	
	#multiple to 1 line
	paste -s file.txt
	
	#multiple to 1 with delimiter
	paste -d -s , file.txt
	
	#multiple file side by side
	paste file.txt file2.txt
	
	#multiple files sequentially, firt one file, then another file
	paste -s file.txt file2.txt

	#group 3 line in one and separated by .
	paste -s -d '..\n' input.txt
	
#array